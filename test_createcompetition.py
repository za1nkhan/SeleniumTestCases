# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestCreatecompetition():
  def setup_method(self, method):
    # self.driver = webdriver.Chrome()
    chrome_option = webdriver.ChromeOptions()
    chrome_option.add_argument("--headless")
    firefox_options = webdriver.FirefoxOptions()
    firefox_options.add_argument("--headless")
    edge_options = webdriver.EdgeOptions()
    edge_options.add_argument("--headless")
    drivers = [webdriver.Chrome(options=chrome_option), webdriver.Firefox(options=firefox_options),
               webdriver.Edge(options=edge_options)]
    self.driver = drivers[0]
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_createcompetition(self):
    # Test name: Create competition 
    # Step # | name | target | value
    # 1 | open | https://rudy.visaic.com.ua/events-categories | 
    self.driver.get("https://rudy.visaic.com.ua/events-categories")
    # 2 | setWindowSize | 2064x1120 | 
    self.driver.set_window_size(2064, 1120)
    # 3 | click | id=email | 
    self.driver.find_element(By.ID, "email").click()
    # 4 | type | id=email | usah.admin@visaic.com
    self.driver.find_element(By.ID, "email").send_keys("usah.admin@visaic.com")
    # 5 | click | id=password | 
    self.driver.find_element(By.ID, "password").click()
    # 6 | type | id=password | usah1234
    self.driver.find_element(By.ID, "password").send_keys("usah1234")
    # 7 | click | css=.btn | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
    # 8 | click | linkText=Add New Competition | 
    self.driver.find_element(By.LINK_TEXT, "Add New Competition").click()
    # 9 | click | name=name | 
    self.driver.find_element(By.NAME, "name").click()
    # 10 | type | name=name | Test comp
    self.driver.find_element(By.NAME, "name").send_keys("Test comp")
    # 11 | click | name=description | 
    self.driver.find_element(By.NAME, "description").click()
    # 12 | type | name=description | automate runs
    self.driver.find_element(By.NAME, "description").send_keys("automate runs")
    # 13 | click | css=.btn-success | 
    self.driver.find_element(By.CSS_SELECTOR, ".btn-success").click()
    # 14 | click | css=.card > .nested-list > .expandable:nth-child(5) > .name | 
    self.driver.find_element(By.CSS_SELECTOR, ".card > .nested-list > .expandable:nth-child(5) > .name").click()
    # 15 | click | css=.card > .nested-list > .expandable:nth-child(5) .btn-toolbar .fa | 
    self.driver.find_element(By.CSS_SELECTOR, ".card > .nested-list > .expandable:nth-child(5) .btn-toolbar .fa").click()
    # 16 | click | linkText=Delete competition | 
    self.driver.find_element(By.LINK_TEXT, "Delete competition").click()
    # 17 | click | css=.confirm-btn | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".confirm-btn")
    self.driver.execute_script("arguments[0].click();", element)
    # 18 | click | css=.fa-angle-down | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa-angle-down").click()
    # 19 | click | linkText=Logout | 
    element2 = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-item:nth-child(3)")
    self.driver.execute_script("arguments[0].click();", element2)
  
