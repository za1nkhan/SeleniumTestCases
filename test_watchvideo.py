# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestWatchvideo():
  def setup_method(self, method):
    # headless Chrome Driver
    chrome_option = webdriver.ChromeOptions()
    chrome_option.add_argument("--headless")
    firefox_options = webdriver.FirefoxOptions()
    firefox_options.add_argument("--headless")
    edge_options = webdriver.EdgeOptions()
    edge_options.add_argument("--headless")
    drivers = [webdriver.Chrome(options=chrome_option), webdriver.Firefox(options=firefox_options),
               webdriver.Edge(options=edge_options)]
    self.driver = drivers[0]

    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_watchvideo(self):
    # Test name: watch video
    # Step # | name | target | value
    # 1 | open | https://usahockeytv.com/watch/2671 |
    prod = "https://usahockeytv.com/watch/2671"
    dev = "https://stage.usah.visaic.tv/watch/1628"
    self.driver.get(dev)
    # 2 | setWindowSize | 1492x859 | 
    self.driver.set_window_size(1492, 859)

    self.driver.implicitly_wait(30)

    # 3 | click | css=.jw-icon-playback |
    self.driver.find_element(By.CSS_SELECTOR, ".jw-icon-playback").click()
    video_player = self.driver.find_element(By.ID, "videoPlayer")
    is_paused = self.driver.execute_script("return jwplayer().getState()") == "paused"
    assert is_paused == True
    # 4 | click | css=.jw-icon-playback | 
    self.driver.find_element(By.CSS_SELECTOR, ".jw-icon-playback").click()
    # 5 | click | css=.jw-icon-rewind:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".jw-icon-rewind:nth-child(2)").click()
    # 6 | mouseDownAt | css=.jw-volume-tip | 24.203125,54.109375
    element = self.driver.find_element(By.CSS_SELECTOR, ".jw-volume-tip")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 7 | mouseMoveAt | css=.jw-volume-tip | 24.203125,54.109375
    element = self.driver.find_element(By.CSS_SELECTOR, ".jw-volume-tip")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 8 | mouseUpAt | css=.jw-volume-tip | 24.203125,54.109375
    element = self.driver.find_element(By.CSS_SELECTOR, ".jw-volume-tip")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 10 | click | css=.jw-icon-volume |
    self.driver.find_element(By.CSS_SELECTOR, ".jw-icon-volume").click()
    # 11 | click | css=.jw-icon-volume |
    self.driver.find_element(By.CSS_SELECTOR, ".jw-icon-volume").click()
    # 12 | click | css=.jw-slider-time |
    self.driver.find_element(By.CSS_SELECTOR, ".jw-slider-time").click()
    # 13 | click | css=.jw-icon-settings |
    self.driver.find_element(By.CSS_SELECTOR, ".jw-icon-settings").click()
    # 14 | click | css=.jw-settings-close |
    self.driver.find_element(By.CSS_SELECTOR, ".jw-settings-close").click()
    # 15 | click | css=.jw-icon-pip |
    self.driver.find_element(By.CSS_SELECTOR, ".jw-icon-pip").click()
    # 16 | click | css=.jw-icon:nth-child(17) |
    # self.driver.find_element(By.CSS_SELECTOR, ".jw-icon:nth-child(17)").click()
    # # 17 | click | css=.jw-icon:nth-child(17) |
    # self.driver.find_element(By.CSS_SELECTOR, ".jw-icon:nth-child(17)").click()

